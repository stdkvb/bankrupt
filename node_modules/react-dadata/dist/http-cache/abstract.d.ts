import type { SerializeCacheKeyPayload } from './types';
export declare abstract class HttpCache {
    /**
     * Получить данные из кеша
     * @param key - Уникальный ключ кеша
     * @example
     * ```ts
     * cache.get('key');
     * ```
     */
    abstract get<T = any>(key: string): T | null;
    /**
     * Добавить данные в кеш
     * @param key - Уникальный ключ кеша
     * @param data - Данные для добавления
     * @example
     * ```ts
     * cache.set('key', { ok: true });
     * ```
     */
    abstract set(key: string, data: any, ...rest: any): any;
    /**
     * Удалить закешированные данные по ключу
     * @param key - Уникальный ключ кеша
     * @xample
     * ```ts
     * cache.delete('key');
     * ```
     */
    abstract delete(key: string): any;
    /**
     * Полностью очистить кеш
     */
    abstract reset(): any;
    /**
     * Сгенерировать уникальный ключ кеша из параметров http-запроса
     * @example
     * ```ts
     * cache.serializeCacheKey({
     *   url: 'https://example.com',
     *   body: { key: "value" },
     *   method: "POST"
     * })
     * ```
     */
    serializeCacheKey(payload: SerializeCacheKeyPayload): string;
}
